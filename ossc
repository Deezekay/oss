Write a Program to create a Binary Tree and perform following non-recursive operations on it. a. Preorder Traversal b. Count Leaf Nodes c. Count total no. of nodes d. Display height of a tree.
#include <stdio.h>
#include <stdlib.h>

// Structure for a node of the binary tree
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Structure for stack
struct Stack {
    int top;
    unsigned capacity;
    struct Node** array;
};

// Function to create a new stack
struct Stack* createStack(unsigned capacity) {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->capacity = capacity;
    stack->top = -1;
    stack->array = (struct Node**)malloc(stack->capacity * sizeof(struct Node*));
    return stack;
}

// Function to check if stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to push node onto stack
void push(struct Stack* stack, struct Node* item) {
    if (stack->top == stack->capacity - 1) return;
    stack->array[++stack->top] = item;
}

// Function to pop node from stack
struct Node* pop(struct Stack* stack) {
    if (isEmpty(stack)) return NULL;
    return stack->array[stack->top--];
}

// Function to create a new node
struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Function to perform preorder traversal non-recursively
void preorderTraversal(struct Node* root) {
    if (root == NULL) return;

    struct Stack* stack = createStack(100);
    push(stack, root);

    while (!isEmpty(stack)) {
        struct Node* node = pop(stack);
        printf("%d ", node->data);

        if (node->right) push(stack, node->right);
        if (node->left) push(stack, node->left);
    }
}

// Function to perform postorder traversal non-recursively
void postorderTraversal(struct Node* root) {
    if (root == NULL) return;

    struct Stack* stack1 = createStack(100);
    struct Stack* stack2 = createStack(100);
    push(stack1, root);

    while (!isEmpty(stack1)) {
        struct Node* node = pop(stack1);
        push(stack2, node);

        if (node->left) push(stack1, node->left);
        if (node->right) push(stack1, node->right);
    }

    while (!isEmpty(stack2)) {
        struct Node* node = pop(stack2);
        printf("%d ", node->data);
    }
}

// Function to count total number of nodes
int countNodes(struct Node* root) {
    if (root == NULL) return 0;

    int count = 1;
    struct Stack* stack = createStack(100);
    push(stack, root);

    while (!isEmpty(stack)) {
        struct Node* node = pop(stack);

        if (node->right) {
            count++;
            push(stack, node->right);
        }

        if (node->left) {
            count++;
            push(stack, node->left);
        }
    }

    return count;
}

// Function to calculate the height of a tree
int height(struct Node* root) {
    if (root == NULL) return 0;

    int height = 0;
    struct Stack* stack = createStack(100);
    struct Node* prev = NULL;

    while (root || !isEmpty(stack)) {
        if (root) {
            push(stack, root);
            root = root->left;
        } else {
            struct Node* node = stack->array[stack->top];
            if (node->right && node->right != prev) {
                root = node->right;
            } else {
                if (stack->top + 1 > height) {
                    height = stack->top + 1;
                }
                prev = stack->array[stack->top];
                pop(stack);
            }
        }
    }

    return height;
}

// Main function
int main() {
    int i = 7;
    int a[i];
    printf("Enter 7 integers: ");
    for (int i = 0; i < 7; i++)
        scanf("%d", &a[i]);
    printf("\nYour tree looks like:\n       %d      \n     %d   %d      \n   %d  %d   %d  %d", a[0], a[1], a[2], a[3], a[4], a[5], a[6]);

    struct Node* root = newNode(a[0]);
    root->left = newNode(a[1]);
    root->right = newNode(a[2]);
    root->left->left = newNode(a[3]);
    root->left->right = newNode(a[4]);
    root->right->left = newNode(a[5]);
    root->right->right = newNode(a[6]);

    printf("\n\nPreorder traversal: ");
    preorderTraversal(root);
    printf("\n");
    printf("Postorder traversal: ");
    postorderTraversal(root);
    printf("\n");
    printf("Total number of nodes: %d\n", countNodes(root));
    printf("Height of the tree: %d\n", height(root));

    return 0;
}
**********************************************************************************************************************************************************************************************************


